#!/bin/bash

# GLOBAL SETTINGS
ZSYNC_PREFIX="bk"
ZSYNC_SSHCONNECT_TIMEOUT=3
ZSYNC_SSHPARAMS="-T -o BatchMode=yes -o ConnectTimeout=$ZSYNC_SSHCONNECT_TIMEOUT"
ZSYNC_RETENTION=3 # keep last 3
ZSYNC_REC="-R"
## RETURN CODES
ZSYNC_ERR_REACH=100
ZSYNC_ERR_TIMESYNC=101
ZSYNC_ERR_DEVIATION=102
ZSYNC_DO_INIT=0
ZSYNC_DO_ROLLING=1
## LOGGING
ZSYNC_DEBUG=1

debugprint(){
  if [[ "$ZSYNC_DEBUG" != "" ]] ; then
    printf "%s\n" "DEBUG: $*"
  fi
}
errprint(){
        printf "%s\n" "ERROR: $*" >&2
}

errquit(){
  errprint "$*"
  exit 1
}

# @TODO
# TIMESTAMPS on snapshots bc rename changes the creation date
# fonction qui egalise 
# cas d egalisation
# 1: master n'a pas reussi a envoyer son snap (connectivite) et est en avance [OK]
# 2: master a ete snapshot et l'ordre avant _0 _1 _2 est devenu _1 _2 => fo corriger les 2
# 3: master a pris zpool destroy, mais backup est toujours up => envoie full backup
# 4: backup a pris zpool destroy, mais master est toujours up => envoie full master
# fo aussi expliquer comment chercher dans les clones
# fo aussi passer sur prox des que c potable

usage() {
  cat << HEREDOC
Usage: $(basename "$0") srcfs desthost destfs
Ex: $(basename "$0") tank 10.1.1.2 tank/backups

Synchronize two ZFS pools from master FS to backup.
Will create backup FS if it doesn't exists.

HEREDOC
}


main() {
  typeset srcfs desthost destfs

  [[ $# != 3 ]] && errquit "$(usage)"

  srcfs="$1"
  desthost="$2"
  destfs="$3"
  
  # starts here
  zsync_verify $srcfs $desthost $destfs
  res=$?
  case "$res" in
    $ZSYNC_ERR_REACH)
      errquit "Backup '$desthost' is not reachable: "$msg""
    ;;
    $ZSYNC_ERR_TIMESYNC)
      errquit "Master ($localtime) and backup ($remotetime) are ${timediff}sec out of time sync"
    ;;
    $ZSYNC_ERR_DEVIATION)
      zsync_equalize $srcfs $desthost $destfs
      errquit "Master and backup have different latest snapshot guid (DEVIATION)"
    ;;
    $ZSYNC_DO_INIT)
      zsync_init $srcfs $desthost $destfs
    ;;
    $ZSYNC_DO_ROLLING)
      zsync_roll $srcfs $desthost $destfs
    ;;
  esac
}

# Sanity checks to verify MASTER and BACKUP fs
zsync_verify() {
  typeset srcfs desthost destfs localtime remotetime

  srcfs="$1"
  desthost="$2"
  destfs="$3"

  # reachability
  debugprint "ssh $ZSYNC_SSHPARAMS "root@$desthost" exit 2>&1"
  msg=$(ssh $ZSYNC_SSHPARAMS "root@$desthost" exit 2>&1)
  if [[ $? -ne 0 ]]; then
    return $ZSYNC_ERR_REACH
  fi

  # time sync
  localtime=$(date +%s)
  remotetime="$(ssh $ZSYNC_SSHPARAMS "root@$desthost" "date +%s")"

  timediff=$(( localtime - remotetime ))
  timediff=$(( timediff < 0 ? -timediff : timediff ))
  debugprint "$deshost out of sync of $timediff"

  if [[ $timediff -gt 100 ]]; then
    return $ZSYNC_ERR_TIMESYNC
  fi

  # is an init ?
  debugprint "zfs list -r "$srcfs" -t snapshot 2>&1 | grep -E "${ZSYNC_PREFIX}_0 " | wc -l"
  is_init=$(zfs list -r "$srcfs" -t snapshot 2>&1 | grep -E "${ZSYNC_PREFIX}_0 " | wc -l)

  if [[ $is_init == 0 ]]; then
    return $ZSYNC_DO_INIT
  else
    # latest guid are equal ?
    debugprint "zfs get -H guid ${srcfs}@${ZSYNC_PREFIX}_0 | awk '{print $3}'"
    debugprint "ssh $ZSYNC_SSHPARAM "root@$desthost" zfs get -H guid ${destfs}@${ZSYNC_PREFIX}_0 | awk '{print $3}'"
    localguid=$(zfs get -H guid ${srcfs}@${ZSYNC_PREFIX}_0 | awk '{print $3}')
    remoteguid=$(ssh $ZSYNC_SSHPARAM "root@$desthost" zfs get -H guid ${destfs}@${ZSYNC_PREFIX}_0 | awk '{print $3}')

    if [[ $localguid == $remoteguid ]]; then
      return $ZSYNC_DO_ROLLING
    else
      # if not there's DEVIATION
      return $ZSYNC_ERR_DEVIATION
    fi
  fi
}

zsync_equalize(){
  typeset srcfs desthost destfs local_creation remote_creation localguid remoteguid

  srcfs="$1"
  desthost="$2"
  destfs="$3"

  printf "Equalizing each pools ...\n"

  # is there a snapshot 0 (none when we rolled back one or the other) ? @TODO

  # compare most recent snap_0 to find out which is late
  local_creation=$(zfs get -H creation -o value ${srcfs}@${ZSYNC_PREFIX}_0)
  local_creation=$(date -d "$local_creation" +%s)
  remote_creation=$(ssh $ZSYNC_SSHPARAMS "root@$desthost" "zfs get -H creation -o value ${destfs}@${ZSYNC_PREFIX}_0")
  remote_creation=$(date -d "$remote_creation" +%s)
  localguid=$(zfs get -H guid -o value ${srcfs}@${ZSYNC_PREFIX}_0)
  remoteguid=$(ssh $ZSYNC_SSHPARAMS "root@$desthost" "zfs get -H guid -o value ${destfs}@${ZSYNC_PREFIX}_0")

  if [[ $local_creation -gt $remote_creation ]]; then
    debugprint "Local ${srcfs}@${ZSYNC_PREFIX}_0($localguid) taken at $local_creation " \
      "is more recent than remote ${srcfs}@${ZSYNC_PREFIX}_0($remoteguid) taken at $remote_creation" 

    # find start and end snaps
    start_snap=$(zfs list -H -t snapshot -o name,guid,creation | grep "$remoteguid" | awk '{print $1}')
    end_snap=${srcfs}@${ZSYNC_PREFIX}_0

    # extra debug
    debugprint "$(printf '%.0s=' {1..18} && printf ' LOCAL SNAPS ' && printf '%.0s=' {1..19}; echo)"
    debugprint "$(zfs list -H -t snapshot -o name,guid,creation)"
    debugprint "$(printf '%.0s=' {1..18} && printf ' REMOTE SNAPS ' && printf '%.0s=' {1..18} ; echo)"
    debugprint "$(ssh $ZSYNC_SSHPARAMS "root@$desthost" "zfs list -H -t snapshot -o name,guid,creation")"

    printf "Will send the difference between $start_snap AND $end_snap to equalize\n"
    debugprint "zfs send -R -I $start_snap $end_snap | ssh -T $desthost zfs recv -o readonly=on  -F $destfs"
    #zfs send -R -I $start_snap $end_snap | ssh -T $desthost zfs recv -o readonly=on  -F $destfs

    # would like to see this in debug
    # root@BKS1:~# zfs list -t snapshot -o name,guid,creation
    # NAME        GUID  CREATION
    # tank@bk_1  18153469052398714126  Tue Oct 28 16:40 2025
    # tank@bk_0  16789816784242719429  Tue Oct 28 16:41 2025

  fi

  exit 1

}

# Perform initial full send
zsync_init() {
  typeset srcfs desthost destfs
  srcfs="$1"
  desthost="$2"
  destfs="$3"

  printf "Performing full replication from local $srcfs to $desthost $destfs\n"

  debugprint "zfs snapshot ${srcfs}@${ZSYNC_PREFIX}_0"
  zfs snapshot ${srcfs}@${ZSYNC_PREFIX}_0
  debugprint "zfs send -R -p ${srcfs}@${ZSYNC_PREFIX}_0 | ssh -T $desthost zfs recv -o readonly=on -F $destfs"
  zfs send -R ${srcfs}@${ZSYNC_PREFIX}_0 | ssh -T $desthost zfs recv -o readonly=on -F $destfs
}

# Perform rolling snapshots from master to backup
zsync_roll() {
  typeset srcfs desthost destfs
  srcfs="$1"
  desthost="$2"
  destfs="$3"

  printf "Performing rolling snapshot from local $srcfs to $desthost $destfs\n"

  # always destroy snapshot that are above retention
  debugprint "zfs destroy -r ${srcfs}@${ZSYNC_PREFIX}_$ZSYNC_RETENTION > /dev/null 2>&1"
  zfs destroy -r ${srcfs}@${ZSYNC_PREFIX}_$ZSYNC_RETENTION > /dev/null 2>&1

  # roll
  for ((i=$ZSYNC_RETENTION-1; i>=0; i--)); do
      debugprint "zfs rename ${srcfs}@${ZSYNC_PREFIX}_$i ${srcfs}@${ZSYNC_PREFIX}_$((i+1)) > /dev/null 2>&1"
      zfs rename ${srcfs}@${ZSYNC_PREFIX}_$i ${srcfs}@${ZSYNC_PREFIX}_$((i+1)) > /dev/null 2>&1
  done
  # take new snap_0
  debugprint "zfs snapshot ${srcfs}@${ZSYNC_PREFIX}_0"
  zfs snapshot ${srcfs}@${ZSYNC_PREFIX}_0
  # send the increment between now (0) and before (1)
  debugprint "zfs send -R -I ${srcfs}@${ZSYNC_PREFIX}_1 ${srcfs}@${ZSYNC_PREFIX}_0 | ssh -T $desthost zfs recv -o readonly=on  -F $destfs"
  zfs send -R -I ${srcfs}@${ZSYNC_PREFIX}_1 ${srcfs}@${ZSYNC_PREFIX}_0 | ssh -T $desthost zfs recv -o readonly=on  -F $destfs
}

main "${@}"
