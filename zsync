#!/bin/bash

# GLOBAL SETTINGS
ZSYNC_PREFIX="bk"
ZSYNC_SSHCONNECT_TIMEOUT=3
ZSYNC_SSHPARAMS="-T -o BatchMode=yes -o ConnectTimeout=$ZSYNC_SSHCONNECT_TIMEOUT"
ZSYNC_RETENTION=3 # keep last 3
## RETURN CODES
ZSYNC_ERR_REACH=100
ZSYNC_ERR_TIMESYNC=101
ZSYNC_ERR_DEVIATION=102
ZSYNC_DO_INIT=0
ZSYNC_DO_ROLLING=1
## LOGGING @TODO
# TIMESTAMPS on snapshots bc rename changes the creation date
# fonction qui egalise 

usage() {
  cat << HEREDOC
Usage: $(basename "$0") srcfs desthost destfs
Ex: $(basename "$0") tank 10.1.1.2 tank/backups

Synchronize two ZFS pools from master FS to backup.
Will create backup FS if it doesn't exists.

HEREDOC
}

errquit(){
  printf "Error %s\n" "$*"
  exit 1
}

main() {
  typeset srcfs desthost destfs

  [[ $# != 3 ]] && errquit "$(usage)"

  srcfs="$1"
  desthost="$2"
  destfs="$3"
  
  # starts here
  zsync_verify $srcfs $desthost $destfs
  res=$?
  case "$res" in
    $ZSYNC_ERR_REACH)
      errquit "Backup '$desthost' is not reachable: "$msg""
    ;;
    $ZSYNC_ERR_TIMESYNC)
      errquit "Master ($localtime) and backup ($remotetime) are ${timediff}sec out of time sync"
    ;;
    $ZSYNC_ERR_DEVIATION)
      errquit "Master and backup have different latest snapshot guid (DEVIATION)"
    ;;
    $ZSYNC_DO_INIT)
      zsync_init $srcfs $desthost $destfs
    ;;
    $ZSYNC_DO_ROLLING)
      zsync_roll $srcfs $desthost $destfs
    ;;
  esac
}

# Sanity checks to verify MASTER and BACKUP fs
zsync_verify() {
  typeset srcfs desthost destfs localtime remotetime localguid remoteguid

  srcfs="$1"
  desthost="$2"
  destfs="$3"

  # reachability
  msg=$(ssh $ZSYNC_SSHPARAMS "root@$desthost" exit 2>&1)
  if [[ $? -ne 0 ]]; then
    return $ZSYNC_ERR_REACH
  fi

  # time sync
  localtime=$(date +%s)
  remotetime="$(ssh $ZSYNC_SSHPARAMS "root@$desthost" "date +%s")"

  timediff=$(( localtime - remotetime ))
  timediff=$(( timediff < 0 ? -timediff : timediff ))

  if [[ $timediff -gt 100 ]]; then
    return $ZSYNC_ERR_TIMESYNC
  fi


  # is an init ?
  is_init=$(zfs list -r "$srcfs" -t snapshot 2>&1 | grep -E "${ZSYNC_PREFIX}_0 " | wc -l)
  if [[ $is_init == 0 ]]; then
    return $ZSYNC_DO_INIT
  else
    # latest guid are equal ?
    localguid=$(zfs get -H guid ${srcfs}@${ZSYNC_PREFIX}_0 | awk '{print $3}')
    remoteguid=$(ssh $ZSYNC_SSHPARAM "root@$desthost" zfs get -H guid ${destfs}@${ZSYNC_PREFIX}_0 | awk '{print $3}')
    if [[ $localguid == $remoteguid ]]; then
      return $ZSYNC_DO_ROLLING
    else
      # if not there's DEVIATION
      return $ZSYNC_ERR_DEVIATION
    fi
  fi


  exit 1
}

# Perform initial full send
zsync_init() {
  typeset srcfs desthost destfs
  srcfs="$1"
  desthost="$2"
  destfs="$3"

  echo "sending init ..."
  zfs snapshot ${srcfs}@${prefix}_0
  zfs send -R ${srcfs}@${prefix}_0 | ssh -T $desthost zfs recv -F $destfs
}

# Perform rolling snapshots from master to backup
zsync_roll() {
  typeset srcfs desthost destfs
  srcfs="$1"
  desthost="$2"
  destfs="$3"

  echo "doing rolling ... "
  # always destroy snapshot that are above retention
  zfs destroy -r ${srcfs}@${ZSYNC_PREFIX}_$ZSYNC_RETENTION > /dev/null 2>&1
  # roll
  for ((i=$ZSYNC_RETENTION-1; i>=0; i--)); do
      zfs rename ${srcfs}@${ZSYNC_PREFIX}_$i ${srcfs}@${ZSYNC_PREFIX}_$((i+1)) > /dev/null 2>&1
  done
  # take new snap_0
  zfs snapshot ${srcfs}@${ZSYNC_PREFIX}_0
  # send the increment between now (0) and before (1)
  zfs send -R -I ${srcfs}@${ZSYNC_PREFIX}_1 ${srcfs}@${ZSYNC_PREFIX}_0 | ssh -T $desthost zfs recv -F $destfs
}

main "${@}"
exit 0

# ======= prev

keep=3

prefix=$(date +%Y%m%d_%H%M%S) #la date de creation du snap est dessus
prefix="bk"

# si snap 0 n'existe pas c un init

is_init=$(zfs list -t snapshot 2>&1 | grep -E '_0 ' | wc -l)
if [[ $is_init == 0 ]]; then 
    echo "sending init ..."
    zfs snapshot tank@${prefix}_0
    zfs send -R tank@${prefix}_0 | ssh -T bks2 zfs recv -F tank
    exit 0
fi

# efface toujours la derniere
echo "zfs destroy -r tank@${prefix}_$keep" 
zfs destroy -r tank@${prefix}_$keep > /dev/null 2>&1
# rename tout le reste +1
for ((i=$keep-1; i>=0; i--)); do
    echo "zfs rename tank@${prefix}_$i tank@${prefix}_$((i+1))"
    zfs rename tank@${prefix}_$i tank@${prefix}_$((i+1)) > /dev/null 2>&1
done
# prend ton snap day 0 et envoie
echo "zfs snapshot tank@${prefix}_0"
zfs snapshot tank@${prefix}_0
echo "zfs send -R -I tank@${prefix}_1 tank@${prefix}_0 | ssh -T bks2 zfs recv -F tank"
zfs send -R -I tank@${prefix}_1 tank@${prefix}_0 | ssh -T bks2 zfs recv -F tank
